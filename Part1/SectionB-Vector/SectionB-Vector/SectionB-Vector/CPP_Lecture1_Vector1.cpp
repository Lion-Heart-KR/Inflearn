//#include <iostream>
//#include <vector>
//using namespace std;
//
///// <summary>
///// 벡터(Vector)
///// [1]개념
///// --- STL(Standard Template Library)의 컨테이너 중 하나
///// --- STL : 프로그래밍 할 때 필요한 자료구조/알고리즘들을 템플릿으로 제공하는 라이브러리
///// --- 크기를 유동적으로 변경하기가 어렵다는 배열의 단점을 해결해줄 수 있다.
///// 
///// [2]벡터에 대한 궁금증
///// --- 여유분은 얼만큼이 적절한가
///// --- 증설할 때는 얼만큼이 적절한가.
///// [2]-A : 현재 vector의 Capa의 1.5배로 늘려준다.
///// 
///// --- 기존의 데이터는 어떻게 처리할까?
///// [2]-A : 기존의 데이터를 [새로 할당받은 공간]에 복사하게 된다. 
/////         이 경우 복사를 하게되면, 복사비용이 발생하게 된다. 그렇기에 추가공간을 너무 적게 잡으면, 복사를 자주해야하고 성능의 감소로 이어진다.
/////         하지만, 추가 공간을 너무 크게 잡으면 다른 프로그램(or프로세스)가 사용할 공간이 감소한다.
/////         Capa가 클수록, 복사해야하는 데이터의 수가 많아지므로, 그에 비례해서 더 많은 공간을 추가로 할당한다.
///// 
///// --- reserve를 사용하는 이유가 뭘까?
///// [2]-A : 향후 사용하게 될 데이터의 수를 대략 안다면, 미리 사용할 공간을 할당받아 놓음으로써, 복사비용을 줄일 수 있다.
/////         
///// 
///// </summary>
///// <returns></returns>
//
//int main()
//{
//	//vector 선언1
//	vector<int> v1;
//
//	//vector 선언2 - 크기가 100
//	vector<int> v2(100);
//
//	//vector 선언3 - 크기가 100, 벡터의 값을 1로 초기화하여 벡터를 생성
//	vector<int> v3(100, 1);
//
//	//vector 선언4
//	vector<int> v4 = v3;
//
//	//vector에 값을 넣는 방법
//	for (int i = 0; i < 100; i++)
//	{
//		//벡터의 공간이 부족할 경우 동적으로 크기를 늘려준다.
//		v1.push_back(i);
//
//		//벡터의 size와 capacity
//		//size : 현재 몇 개의 데이터가 있는지 확인
//		//capacity : 현재 벡터의 최대 공간
//		cout << "(" << v1.size() << ", " << v1.capacity() << ")" << endl;
//
//		//아래의 경우, 벡터의 크기가 동적으로 늘어나진 않는다.
//		//v1[i] = i;
//	}
//
//	//가장 마지막에 있는 데이터 '확인하기'
//	cout << "last item : " << v1.back() << endl;
//
//	//가장 앞에 있는 데이터 '확인하기'
//	cout << "first item : " << v1.front() << endl;
//
//	//가장 마지막에 있는 데이터를 '꺼내기'
//	v1.pop_back();
//
//	cout << v1.size() << endl;
//
//	//모든 데이터를 지우기. capacity는 유지된다.
//	v1.clear();
//
//	cout << "(" << v1.size() << ", " << v1.capacity() << ")" << endl;
//
//	vector<int> v5;
//
//	cout << "--------------------------------------------" << endl;
//
//	//벡터의 capa를 지정해주기
//	v5.reserve(100);
//	cout << "(" << v5.size() << ", " << v5.capacity() << ")" << endl;
//
//	//벡터의 size를 지정해주기. 121번째부터 값이 들어간다.
//	v5.resize(120);
//	cout << "(" << v5.size() << ", " << v5.capacity() << ")" << endl;
//
//	
//
//	return 0;
//}